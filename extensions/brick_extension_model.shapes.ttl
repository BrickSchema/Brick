# baseURI: http://data.ashrae.org/standard223/1.0/validation/model
# imports: http://data.ashrae.org/standard223/1.0/model/all

@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix all: <http://data.ashrae.org/standard223/model/all#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix bacnet: <http://data.ashrae.org/bacnet/2020#> .
@prefix brick: <https://brickschema.org/schema/Brick#> .
@prefix bsh: <https://brickschema.org/schema/BrickShape#> .
@prefix constant: <http://qudt.org/vocab/constant/> .
@prefix creativecommons: <http://creativecommons.org/ns#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix domain: <http://data.ashrae.org/standard223/1.0/vocab/domain#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix functions: <http://qudt.org/2.1/schema/extensions/functions#> .
@prefix g36: <http://data.ashrae.org/standard223/1.0/extension/g36#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix imports: <http://qudt.org/2.1/schema/extensions/imports#> .
@prefix mc: <http://www.linkedmodel.org/owl/schema/core#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix prefix: <http://qudt.org/2.1/vocab/prefix/> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix qkdv: <http://qudt.org/vocab/dimensionvector/> .
@prefix quantitykind: <http://qudt.org/vocab/quantitykind/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix qudtqk: <http://qudt.org/vocab/quantitykind/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix role: <http://data.ashrae.org/standard223/1.0/vocab/role#> .
@prefix s223: <http://data.ashrae.org/standard223#> .
@prefix schema: <http://schema.org/> .
@prefix sdo: <http://schema.org#> .
@prefix settings: <http://data.ashrae.org/standard223/extensions/settings#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix shacl: <http://data.ashrae.org/standard223/1.0/extension/function/shacl#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix sosa: <http://www.w3.org/ns/sosa/> .
@prefix sou: <http://qudt.org/vocab/sou/> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix tag: <https://brickschema.org/schema/BrickTag#> .
@prefix time: <http://www.w3.org/2006/time#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix vcard: <http://www.w3.org/2006/vcard/ns#> .
@prefix voaf: <http://purl.org/vocommons/voaf#> .
@prefix voag: <http://voag.linkedmodel.org/schema/voag#> .
@prefix vs223: <http://data.ashrae.org/standard223/validation/schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

s223:AbstractSensor
  sh:property [
      rdfs:comment "Ensure that the Substance identified by a sensor via the s223:measuresSubstance relation is compatible with the Substance identified by the Property being measured via the s223:ofSubstance relation." ;
      sh:path s223:measuresSubstance ;
      sh:name "Test for compatible declared Substances" ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "Ensure that the Substance identified by a sensor via the s223:measuresSubstance relation is compatible with the Substance identified by the Property being measured via the s223:ofSubstance relation." ;
          sh:message "Sensor {$this} measures substance {?a}, but the measured Property identifies an incompatible substance of {?b} via the s223:ofSubstance relation." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT DISTINCT $this ?a ?b
WHERE {
$this s223:measuresSubstance ?a .
$this s223:observes/s223:ofSubstance ?b .
?a a/rdfs:subClassOf* s223:EnumerationKind .
?b a/rdfs:subClassOf* s223:EnumerationKind .
FILTER (?a != ?b ) .
FILTER (NOT EXISTS {?b a/rdfs:subClassOf* ?a}) .
FILTER (NOT EXISTS {?a a/rdfs:subClassOf* ?b}) .
}
""" ;
        ] ;
    ] ;
.
s223:BACnetExternalReference
    sh:property
        [ a sh:PropertyShape ;
            rdfs:comment "This comment intentionally left blank." ;
            sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:minCount 0 ;
            sh:path bacnet:device-name ],
        [ a sh:PropertyShape ;
            rdfs:comment "This comment intentionally left blank." ;
            sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:minCount 0 ;
            sh:path bacnet:device-identifier ;
            sh:pattern "^[A-Za-z0-9-]+,[1-9][0-9]*$" ],
        [ a sh:PropertyShape ;
            rdfs:comment "This comment intentionally left blank." ;
            sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:minCount 0 ;
            sh:path bacnet:object-name ],
        [ a sh:PropertyShape ;
            rdfs:comment "This comment intentionally left blank." ;
            sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:minCount 0 ;
            sh:path bacnet:object-identifier ;
            sh:pattern "^[A-Za-z0-9-]+,[1-9][0-9]*$" ],
        [ a sh:PropertyShape ;
            rdfs:comment "This comment intentionally left blank." ;
            sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:minCount 0 ;
            sh:path bacnet:property-identifier ],
        [ a sh:PropertyShape ;
            rdfs:comment "This comment intentionally left blank." ;
            sh:datatype xsd:nonNegativeInteger ;
            sh:maxCount 1 ;
            sh:minCount 0 ;
            sh:path bacnet:property-array-index ],
        [ a sh:PropertyShape ;
            rdfs:comment "This comment intentionally left blank." ;
            sh:datatype xsd:nonNegativeInteger ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
            sh:path bacnet:priority-for-writing ]
.
s223:ClosedWorldShape
  a sh:NodeShape ;
  sh:severity sh:Info ;
  sh:sparql [
      a sh:SPARQLConstraint ;
      rdfs:comment "Ensure that all instances of a class use only the properties defined for that class." ;
      sh:message "Predicate {?p} is not defined for instance {$this}." ;
      sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
      sh:select """
SELECT $this ?p ?o
WHERE {
$this a/rdfs:subClassOf* s223:Concept .
$this ?p ?o .
FILTER(STRSTARTS (str(?p), "http://data.ashrae.org/standard223") || STRSTARTS (str(?p), "http://qudt.org/schema/qudt"))
FILTER NOT EXISTS {$this a sh:NodeShape}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
			?class sh:property/sh:path ?p .
}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
?class sh:xone/rdf:rest*/rdf:first/sh:property/sh:path ?p .
}
FILTER NOT EXISTS {$this a/rdfs:subClassOf* ?class .
?class sh:or/rdf:rest*/rdf:first/sh:property/sh:path ?p .
}
}
""" ;
    ] ;
  sh:targetClass s223:Concept ;
.
s223:Concept
  sh:sparql [
      a sh:SPARQLConstraint ;
      rdfs:comment "Ensure that any instance that is declared to be an instance of an abstract class must also be declared an instance of at least one subClass of that abstract class" ;
      sh:message "{$this} cannot be declared an instance of only abstract class {?class}." ;
      sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
      sh:select """
SELECT DISTINCT $this ?class
WHERE {
?class s223:abstract true .
$this a ?class .
OPTIONAL {
?otherClass rdfs:subClassOf+ ?class .
$this a ?otherClass .
FILTER (?class != ?otherClass) .
}
FILTER (!bound (?otherClass)) .
}
""" ;
    ] ;
.
s223:Connectable
  sh:property [
      sh:path s223:cnx ;
      rdfs:comment "For a Connectable, cnx relation must associate the Connectable to a ConnectionPoint" ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "A Connectable should only have a s223:cnx relation with a ConnectionPoint" ;
          sh:message "{$this} cannot have a s223:cnx relation to {?something}, because {?something} is not a ConnectionPoint." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """SELECT $this ?something
WHERE {
$this s223:cnx ?something .
FILTER NOT EXISTS {?something a/rdfs:subClassOf* s223:ConnectionPoint} .
}""" ;
        ] ;
    ] ;
  sh:property [
      sh:path s223:mapsTo ;
      rdfs:comment "If one ConnectionPoint mapsTo another ConnectionPoint, the respective Equipment shall have a contains relation." ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "If a Connectable is s223:connected (high-level), it must eventually have the underlying cnx relations." ;
          sh:message "{$this} is s223:connected (high-level) to {?otherC} but not yet connected at the cnx-level." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?otherC
WHERE {
$this s223:connected ?otherC .
FILTER NOT EXISTS {$this s223:cnx+ ?otherC}
}
""" ;
          sh:severity sh:Warning ;
        ] ;
    ] ;
.
s223:Connection
  sh:property [
      sh:path s223:cnx ;
      rdfs:comment "A Connection must only have a cnx relation with a ConnectionPoint" ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "A Connection must only have a cnx relation with a ConnectionPoint" ;
          sh:message "{$this} cannot have a s223:cnx relation to {?something}, because {?something} is not a ConnectionPoint." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """SELECT $this ?something
WHERE {
$this s223:cnx ?something .
FILTER NOT EXISTS {?something a/rdfs:subClassOf* s223:ConnectionPoint} .
}""" ;
        ] ;
    ] ;
  sh:property [
      rdfs:comment "Ensure that the Medium identified by a ConnectionPoint via the s223:hasMedium relation is compatible with the Medium identified by the associated Connection." ;
      sh:path s223:hasMedium ;
      sh:name "Test for compatible declared Medium" ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "Ensure that the Medium identified by a ConnectionPoint via the s223:hasMedium relation is compatible with the Medium identified by the associated Connection." ;
          sh:message "{$this} with Medium {?m2} is incompatible with {?cp} with Medium {?m1}." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?m2 ?cp ?m1
WHERE {
$this s223:cnx ?cp .
?cp a/rdfs:subClassOf* s223:ConnectionPoint .
?cp s223:hasMedium ?m1 .
$this s223:hasMedium ?m2 .
FILTER (?m1 != ?m2 ) .
FILTER (NOT EXISTS {?m2 a/rdfs:subClassOf* ?m1}) .
FILTER (NOT EXISTS {?m1 a/rdfs:subClassOf* ?m2}) .
}
""" ;
        ] ;
    ] ;
.
s223:ConnectionPoint
  sh:property [
      rdfs:comment "Ensure that the Medium identified by a ConnectionPoint via the s223:hasMedium relation is compatible with the Medium identified by the entity identified by the mapsTo+ relation." ;
      sh:path s223:hasMedium ;
      sh:name "Test for compatible declared Medium" ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "Ensure that the Medium identified by a ConnectionPoint via the s223:hasMedium relation is compatible with the Medium identified by the entity identified by the mapsTo+ relation." ;
          sh:message "{$this} declares a Medium of {?a}, but the Medium of {?b} is declared by {?target} pointed to by the mapsTo+ relation." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT DISTINCT $this ?a ?b ?target
WHERE {
$this s223:hasMedium ?a .
$this s223:mapsTo+ ?target .
?target s223:hasMedium ?b .
?a a/rdfs:subClassOf* s223:EnumerationKind-Medium .
?b a/rdfs:subClassOf* s223:EnumerationKind-Medium .
FILTER (?a != ?b ) .
FILTER (NOT EXISTS {?b a/rdfs:subClassOf* ?a}) .
FILTER (NOT EXISTS {?a a/rdfs:subClassOf* ?b}) .
}
""" ;
        ] ;
    ] ;
  sh:property [
      sh:path s223:mapsTo ;
      rdfs:comment "If a CP mapsTo another CP, the respective Equipment should have a contains relation." ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "If a CP mapsTo another CP, the respective Equipment should have a contains relation." ;
          sh:message "{?otherEquipment} should contain {?equipment} because ConnectionPoint {$this} has a mapsTo relation." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?equipment ?otherEquipment
WHERE {
$this s223:mapsTo ?otherCP .
?equipment s223:hasConnectionPoint $this .
?otherEquipment s223:hasConnectionPoint ?otherCP .
FILTER NOT EXISTS {?otherEquipment s223:contains ?equipment}
}
""" ;
        ] ;
    ] ;
.
s223:ControllerRoleShape
  a sh:NodeShape ;
  rdfs:comment "Equipment that executes a FunctionBlock must have a s223:hasRole relation to s223:Role-Controller." ;
  sh:property [
      a sh:PropertyShape ;
      sh:path s223:hasRole ;
      sh:hasValue s223:Role-Controller ;
      sh:message "Equipment that executes a FunctionBlock must have a s223:hasRole relation to s223:Role-Controller." ;
      sh:minCount 1 ;
    ] ;
  sh:targetSubjectsOf s223:executes ;
.
s223:CoolingCoil
  sh:rule [
      a sh:TripleRule ;
      rdfs:comment "Cooling coils will always have the role Role-Cooling" ;
      sh:object s223:Role-Cooling ;
      sh:predicate s223:hasRole ;
      sh:subject sh:this ;
    ] ;
.
s223:CorrelatedColorTemperatureSensor
  sh:property [
      sh:path s223:observes ;
      rdfs:comment "A CorrelatedColorTemperatureSensor must always observe a Property that has a QuantityKind of ThermodynamicTemperature." ;
      sh:qualifiedMinCount 1 ;
      sh:qualifiedValueShape [
          sh:class s223:Property ;
          sh:node [
              sh:property [
                  sh:path qudt:hasQuantityKind ;
                  sh:hasValue qudtqk:ThermodynamicTemperature ;
                ] ;
            ] ;
        ] ;
    ] ;
.
s223:DifferentialSensor
  sh:property [
      sh:path s223:hasObservationLocationHigh ;
      rdfs:comment "A Differential Sensor must have different values for hasObservationLocationHigh and hasObservationLocationLow." ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "Ensure that the values of hasObservationLocationHigh and hasObservationLocationLow are distinct." ;
          sh:message "{$this} cannot have the same value, {?high}, for both hasObservationLocationHigh and hasObservationLocationLow" ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?high
WHERE {
  ?this s223:hasObservationLocationHigh ?high .
    ?this s223:hasObservationLocationLow ?low .
FILTER (?high = ?low) .
}
""" ;
        ] ;
    ] ;
.
s223:DomainSpace
  sh:property [
      sh:path [
          sh:inversePath s223:encloses ;
        ] ;
      rdfs:comment "A DomainSpace must be enclosed by a PhysicalSpace." ;
      sh:message "A DomainSpace must be enclosed by a PhysicalSpace." ;
      sh:minCount 1 ;
      sh:severity sh:Info ;
    ] ;
.
s223:DuvSensor
  sh:property [
      sh:path s223:observes ;
      rdfs:comment "A DuvSensor must always observe a Property that has a QuantityKind of Duv." ;
      sh:qualifiedMinCount 1 ;
      sh:qualifiedValueShape [
          sh:class s223:Property ;
          sh:node [
              sh:property [
                  sh:path qudt:hasQuantityKind ;
                  sh:hasValue qudtqk:Duv ;
                ] ;
            ] ;
        ] ;
    ] ;
.
s223:EnumerableProperty
  sh:property [
      sh:path s223:hasValue ;
      rdfs:comment "Checks for valid enumeration value consistent with the stated EnumerationKind." ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "Checks for valid enumeration value consistent with the stated EnumerationKind." ;
          sh:message "{$this} has an enumeration value of {?value} which is not a valid {?kind}." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?value ?kind
WHERE {
$this s223:hasValue ?value .
$this s223:hasEnumerationKind ?kind .
FILTER (NOT EXISTS {?value a/rdfs:subClassOf* ?kind}) .
}
""" ;
        ] ;
    ] ;
.
s223:Equipment
  sh:property [
      sh:path s223:connectedFrom ;
      rdfs:comment "If a contained equipment has external connections, make sure that the containing equipment has the same external connections." ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "If a contained equipment has external connections, make sure that the containing equipment has the same external connections." ;
          sh:message "{?container} does not have a connectedFrom relation to {?otherDev} even though {?container} contains {$this} which does." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?container ?otherDev
WHERE {
$this s223:connectedFrom ?otherDev .
$this ^s223:contains ?container .
?container a/rdfs:subClassOf* s223:Equipment .
FILTER NOT EXISTS {?container s223:contains ?otherDev .}
FILTER NOT EXISTS {?container s223:connectedFrom ?otherDev .}
}
""" ;
        ] ;
    ] ;
  sh:property [
      sh:path s223:connectedTo ;
      rdfs:comment "Make sure that a containing Equipment inherits the outgoing connectedTo relations of contained Equipment if they are not internal connections." ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "Make sure that a containing Equipment inherits the outgoing connectedTo relations of contained Equipment if they are not internal connections." ;
          sh:message "{?container} does not have a connectedTo relation to {?otherDev} even though {?container} contains {$this} which does." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?container ?otherDev
WHERE {
$this s223:connectedTo ?otherDev .
$this ^s223:contains ?container .
?container a/rdfs:subClassOf* s223:Equipment .
FILTER NOT EXISTS {?container s223:contains ?otherDev .}
FILTER NOT EXISTS {?container s223:connectedTo ?otherDev .}
}
""" ;
        ] ;
    ] ;
  sh:property [
      sh:path s223:contains ;
      rdfs:comment "Warning about a subClass of Equipment of type A containing something that is in the same subClass branch." ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "Warning about a subClass of Equipment of type A containing something that is in the same subClass branch." ;
          sh:message "{$this}, of type {?type1}, contains {?subEquip} of type {?type2}, that could result in double-counting items in the class hierarchy of {?type1}." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?subEquip ?type1 ?type2
WHERE {
  FILTER NOT EXISTS {$this a s223:Equipment} .
$this s223:contains+ ?subEquip .
  FILTER NOT EXISTS {?subEquip a s223:Equipment} .
$this a ?type1 .
?subEquip a ?type2 .
{
?type2 rdfs:subClassOf* ?type1 .
}
UNION
{
?type1 rdfs:subClassOf* ?type2 .
}
}
""" ;
          sh:severity sh:Warning ;
        ] ;
    ] ;
.
s223:HeatExchanger
  sh:property [
      sh:path s223:hasConnectionPoint ;
      rdfs:comment "Heat Exchangers should have the same number of non-electrical inlet and outlet connection points." ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "Heat Exchangers should have the same number of non-electrical inlet and outlet connection points." ;
          sh:message "Number of inlets {?incount} are not equivalent with number of outlets {?outcount}." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT DISTINCT $this ?incount ?outcount
WHERE {
{
SELECT $this (COUNT (?cpin) AS ?incount)
WHERE {
?cpin a/rdfs:subClassOf* s223:InletConnectionPoint .
$this s223:hasConnectionPoint ?cpin .
?cpin s223:hasMedium ?inmedium .
FILTER NOT EXISTS {
    ?inmedium a/rdfs:subClassOf* s223:Medium-Electricity .
  }
}
GROUP BY $this
}
{
SELECT $this (COUNT (?cpout) AS ?outcount)
WHERE {
?cpout a/rdfs:subClassOf* s223:OutletConnectionPoint .
$this s223:hasConnectionPoint ?cpout .
?cpout s223:hasMedium ?outmedium .
FILTER NOT EXISTS {
    ?outmedium a/rdfs:subClassOf* s223:Medium-Electricity .
  }
}
GROUP BY $this
}
FILTER (?incount != ?outcount)
}
""" ;
          sh:severity sh:Warning ;
        ] ;
    ] ;
.
s223:HeatingCoil
  sh:rule [
      a sh:TripleRule ;
      rdfs:comment "Heating coils will always have the role Role-Heating" ;
      sh:object s223:Role-Heating ;
      sh:predicate s223:hasRole ;
      sh:subject sh:this ;
    ] ;
.
s223:IlluminanceSensor
  sh:property [
      sh:path s223:observes ;
      rdfs:comment "An IlluminanceSensor will always observe a Property that has a QuantityKind of Illuminance." ;
      sh:qualifiedMinCount 1 ;
      sh:qualifiedValueShape [
          sh:class s223:Property ;
          sh:node [
              sh:property [
                  sh:path qudt:hasQuantityKind ;
                  sh:hasValue qudtqk:Illuminance ;
                ] ;
            ] ;
        ] ;
    ] ;
.
s223:InletConnectionPoint
  sh:property [
      rdfs:comment "Ensure an InletConnectionPoint has a mapsTo relation to its containing Equipment if it has an external Connection" ;
      sh:path s223:mapsTo ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "Ensure an InletConnectionPoint has a mapsTo relation to its containing Equipment if it has an external Connection" ;
          sh:message "{$this} must have a mapsTo an InletConnectionPoint of {?parentEquipment} because {$this} has an external Connection from {?sourceEquipment}." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?parentEquipment ?sourceEquipment
WHERE {
?equipment s223:hasConnectionPoint $this .
?equipment a/rdfs:subClassOf* s223:Equipment .
?parentEquipment s223:contains ?equipment .
$this s223:connectsThrough/s223:connectsFrom ?sourceEquipment .
FILTER NOT EXISTS {?parentEquipment s223:contains ?sourceEquipment} .
FILTER NOT EXISTS {$this s223:mapsTo ?anything} .
}
""" ;
        ] ;
    ] ;
.
s223:OccupantCounter
  sh:property [
      sh:path s223:observes ;
      rdfs:comment "An OccupantCounter must always observe a QuantifiableObservableProperty that has a QuantityKind of Population and a Unit of unit:NUM." ;
      sh:class s223:QuantifiableObservableProperty ;
      sh:minCount 1 ;
      sh:node [
          sh:property [
              sh:path qudt:hasQuantityKind ;
              sh:hasValue qudtqk:Population ;
              sh:maxCount 1 ;
            ] ;
          sh:property [
              sh:path qudt:hasUnit ;
              sh:hasValue unit:NUM ;
              sh:maxCount 1 ;
            ] ;
        ] ;
    ] ;
.
s223:OccupantMotionSensor
  sh:property [
      sh:path s223:observes ;
      rdfs:comment "An OccupantMotionSensor must always observe an EnumeratedObservableProperty that has an EnumerationKind of Occupancy-Motion." ;
      sh:class s223:EnumeratedObservableProperty ;
      sh:minCount 1 ;
      sh:node [
          sh:property [
              sh:path s223:hasEnumerationKind ;
              sh:class s223:Occupancy-Motion ;
              sh:maxCount 1 ;
            ] ;
        ] ;
    ] ;
.
s223:OccupantPresenceSensor
  sh:property [
      sh:path s223:observes ;
      rdfs:comment "An OccupantPresenceSensor will always observe an EnumeratedObservableProperty that has an EnumerationKind of Occupancy-Presence." ;
      sh:class s223:EnumeratedObservableProperty ;
      sh:minCount 1 ;
      sh:node [
          sh:property [
              sh:path s223:hasEnumerationKind ;
              sh:class s223:Occupancy-Presence ;
              sh:maxCount 1 ;
            ] ;
        ] ;
    ] ;
.
s223:OutletConnectionPoint
  sh:property [
      rdfs:comment "Ensure an OutletConnectionPoint has a mapsTo relation to its containing Equipment if it has an external Connection" ;
      sh:path s223:mapsTo ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "Ensure an OutletConnectionPoint has a mapsTo relation to its containing Equipment if it has an external Connection" ;
          sh:message "{$this} must have a mapsTo an OutletConnectionPoint of {?parentEquipment} because {$this} has an external Connection to {?destinationEquipment}." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?parentEquipment ?destinationEquipment
WHERE {
?equipment s223:hasConnectionPoint $this .
?equipment a/rdfs:subClassOf* s223:Equipment .
?parentEquipment s223:contains ?equipment .
$this s223:connectsThrough/s223:connectsTo ?destinationEquipment .
FILTER NOT EXISTS {?parentEquipment s223:contains ?destinationEquipment} .
FILTER NOT EXISTS {$this s223:mapsTo ?anything} .
}
""" ;
        ] ;
    ] ;
.
s223:Property
  sh:sparql [
      a sh:SPARQLConstraint ;
      rdfs:comment "A Property instance cannot be declared an instance of both an ActuatableProperty and an ObservableProperty." ;
      sh:message "{$this} cannot be declared an instance of both an ActuatableProperty and an ObservableProperty." ;
      sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
      sh:select """
SELECT $this
WHERE {
$this a/rdfs:subClassOf* s223:ActuatableProperty .
$this a/rdfs:subClassOf* s223:ObservableProperty .
}
""" ;
    ] ;
.
s223:Pump
  a sh:NodeShape ;
  sh:property [
      sh:path s223:hasConnectionPoint ;
      rdfs:comment "The non-electrical ConnectionPoints of a Pump must have compatible Media." ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "The non-electrical ConnectionPoints of a Pump must have compatible Media." ;
          sh:message "{?cpa} and {?cpb} on the Pump {$this} have incompatible Media {$mediuma} and {$mediumb}." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?cpa ?cpb ?mediuma ?mediumb
WHERE {
  $this s223:hasConnectionPoint ?cpa .
  $this s223:hasConnectionPoint ?cpb .
  FILTER (?cpa != ?cpb) .
  ?cpa s223:hasMedium ?mediuma .
  FILTER (NOT EXISTS {?mediuma a/rdfs:subClassOf* s223:Medium-Electricity}) .
  ?cpb s223:hasMedium ?mediumb .
  FILTER (NOT EXISTS {?mediumb a/rdfs:subClassOf* s223:Medium-Electricity}) .
  FILTER (?mediuma != ?mediumb) .
  FILTER (NOT EXISTS {?mediumb a/rdfs:subClassOf* ?mediuma}) .
  FILTER (NOT EXISTS {?mediuma a/rdfs:subClassOf* ?mediumb}) .
}
""" ;
        ] ;
    ] ;
.
s223:QuantifiableProperty
  sh:property [
      rdfs:comment "This QuantifiableProperty and the Setpoint associated with it have non-commensurate QuantityKinds" ;
      sh:path qudt:hasQuantityKind ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "This QuantifiableProperty and the Setpoint associated with it have non-commensurate QuantityKinds" ;
          sh:message "{$this} uses QuantityKind {?pqk} with DimensionVector {?pdv}, while Setpoint {?setpoint} uses QuantityKind {?sqk} with DimensionVector {?sdv}. These are non-commensurate" ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?setpoint ?pqk ?sqk ?pdv ?sdv
WHERE {
$this qudt:hasQuantityKind ?pqk .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasQuantityKind ?sqk .
?pqk qudt:hasDimensionVector ?pdv .
?sqk qudt:hasDimensionVector ?sdv .
FILTER (?pqk != ?sqk) .
FILTER (?pdv != ?sdv) .
}
""" ;
        ] ;
    ] ;
  sh:property [
      rdfs:comment "This QuantifiableProperty and the associated Setpoint use non-commensurate Units" ;
      sh:path qudt:hasUnit ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "This QuantifiableProperty and the associated Setpoint use non-commensurate Units" ;
          sh:message "{$this} uses Unit {?punit}, while Setpoint {?setpoint} uses Unit {?sunit}. These are non-commensurate." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?setpoint ?punit ?sunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasUnit ?sunit .
?punit qudt:hasDimensionVector ?pdv .
?sunit qudt:hasDimensionVector ?sdv .
FILTER (?punit != ?sunit) .
FILTER (?pdv != ?sdv) .
}
""" ;
        ] ;
    ] ;
  sh:property [
      rdfs:comment "This QuantifiableProperty uses a different Unit than the Setpoint associated with it" ;
      sh:path qudt:hasUnit ;
      sh:severity sh:Info ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "This QuantifiableProperty uses a different Unit than the Setpoint associated with it" ;
          sh:message "{$this} uses Unit {?punit}, while Setpoint {?setpoint} uses Unit {?sunit}. Be careful." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT $this ?setpoint ?punit ?sunit
WHERE {
$this qudt:hasUnit ?punit .
$this s223:hasSetpoint ?setpoint .
?setpoint qudt:hasUnit ?sunit .
?punit qudt:hasDimensionVector ?pdv .
?sunit qudt:hasDimensionVector ?sdv .
FILTER (?punit != ?sunit) .
FILTER (?pdv = ?sdv) .
}
""" ;
        ] ;
    ] ;
  sh:sparql [
      a sh:SPARQLConstraint ;
      rdfs:comment "Checks for consistent dimension vectors for a QuantityKind and the Unit" ;
      sh:message "Inconsistent dimensionalities among the Property's Unit and Property's Quantity Kind" ;
      sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
      sh:select """
SELECT $this ?count
WHERE {
{ SELECT  $this (COUNT (DISTINCT ?qkdv) AS ?count)
   WHERE
{
      {
      $this qudt:hasQuantityKind/qudt:hasDimensionVector ?qkdv .
      }
      UNION
      {
      $this qudt:hasUnit/qudt:hasDimensionVector ?qkdv .
      }
}
 GROUP BY $this
}
FILTER (?count > 1) .
}
""" ;
    ] ;
.
s223:TemperatureSensor
  sh:property [
      sh:path s223:observes ;
      rdfs:comment "A TemperatureSensor must always observe a Property that has a QuantityKind of Temperature." ;
      sh:qualifiedMinCount 1 ;
      sh:qualifiedValueShape [
          sh:class s223:Property ;
          sh:node [
              sh:property [
                  sh:path qudt:hasQuantityKind ;
                  sh:hasValue qudtqk:Temperature ;
                ] ;
            ] ;
        ] ;
    ] ;
.
s223:Zone
  a sh:NodeShape ;
  sh:property [
      rdfs:comment "The associated Domain of a Zone and the Domain of the DomainSpaces it contains must be the same." ;
      sh:path s223:hasDomain ;
      sh:sparql [
          a sh:SPARQLConstraint ;
          rdfs:comment "The associated Domain of a Zone and the Domain of the DomainSpaces it contains must be the same." ;
          sh:message "Zone {$this} has a Domain of {?domain}, but it contains a DomainSpace {?ds} which has a Domain of {?dsdomain}. These should be the same." ;
          sh:prefixes <http://data.ashrae.org/standard223/1.0/validation/model> ;
          sh:select """
SELECT DISTINCT $this ?domain ?ds ?dsdomain
WHERE {
$this a s223:Zone .
$this s223:hasDomain ?domain .
$this s223:contains ?ds .
?ds s223:hasDomain ?dsdomain .
FILTER (?domain != ?dsdomain)
}
""" ;
        ] ;
    ] ;
.
<http://data.ashrae.org/standard223/1.0/validation/model>
  a owl:Ontology ;
  owl:imports <http://data.ashrae.org/standard223/1.0/model/all> ;
  owl:versionInfo "Created with TopBraid Composer" ;
  sh:declare [
      sh:namespace "http://data.ashrae.org/standard223#"^^xsd:anyURI ;
      sh:prefix "s223" ;
    ] ;
  sh:declare [
      sh:namespace "http://data.ashrae.org/standard223/1.0/vocab/enumeration#"^^xsd:anyURI ;
      sh:prefix "enum" ;
    ] ;
  sh:declare [
      sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI ;
      sh:prefix "rdf" ;
    ] ;
  sh:declare [
      sh:namespace "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI ;
      sh:prefix "rdfs" ;
    ] ;
  sh:declare [
      sh:namespace "http://www.w3.org/ns/shacl#"^^xsd:anyURI ;
      sh:prefix "sh" ;
    ] ;
.
