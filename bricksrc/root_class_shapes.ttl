@prefix brick: <https://brickschema.org/schema/Brick#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix bsh: <https://brickschema.org/schema/BrickShape#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix rec: <https://w3id.org/rec#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix vcard: <http://www.w3.org/2006/vcard/ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .


brick:Location a sh:NodeShape ;
    rdfs:subClassOf rec:Space ;
    sh:node [sh:not [ sh:class brick:Point ] ; sh:message "Location is an exclusive top class."],
            [sh:not [ sh:class brick:Equipment ] ; sh:message "Location is an exclusive top class." ],
            [sh:not [ sh:class brick:Substance ] ; sh:message "Location is an exclusive top class." ],
            [sh:not [ sh:class brick:Quantity ] ; sh:message "Location is an exclusive top class." ],
            [sh:not [ sh:class brick:Collection ] ; sh:message "Location is an exclusive top class." ] ;
    sh:property [
        sh:path brick:hasPart;
        sh:or ( [ sh:class brick:Location] [ sh:class rec:Space ] );
        sh:message "A Location's parts should be always be Locations/Spaces."
    ];
    sh:property [
        sh:path brick:isPartOf;
        sh:or ( [ sh:class brick:Location ] [ sh:class rec:Space ] );
        sh:message "A Location's parts should be always be Locations/Spaces."
    ];
    sh:property [
        sh:path brick:isFedBy;
        sh:class brick:Equipment;
        sh:message "Locations can be fed only by other Equipment."
    ];
    sh:property [
        sh:path brick:hasPoint ;
        sh:class brick:Point ;
        sh:message "A Location can have Points."
    ];
    .

brick:Equipment a sh:NodeShape ;
    sh:not [ sh:class brick:Location ; sh:message "Instances of Equipment cannot be Locations." ] ,
           [ sh:class brick:Substance ; sh:message "Instances of Equipment cannot be Substances." ],
           [ sh:class brick:Quantity ; sh:message "Instances of Equipment cannot be Quantities." ],
           [ sh:class brick:Collection ; sh:message "Instances of Equipment cannot be Collections." ],
           [ sh:class brick:Point ; sh:message "Instances of Equipment cannot be Points." ],
           [ sh:class brick:EntityProperty ; sh:message "Instances of Equipment cannot be EntityProperties." ] ;
    sh:property [
        sh:path brick:hasPart;
        sh:class brick:Equipment;
        sh:message "A piece of Equipment's parts should be always other Equipment."
    ];
    sh:property [
        sh:path brick:hasPoint ;
        sh:class brick:Point ;
        sh:message "A piece of Equipment can have Points."
    ];
    sh:property [
        sh:path brick:isPartOf;
        sh:or (
            [ sh:class brick:System ]
            [ sh:class brick:Equipment ]
            [ sh:class brick:Collection ]
        );
        sh:message "Equipment can be part of a Collection, System or other Equipment."
    ];
    sh:property [
        sh:path brick:hasLocation;
        sh:or ( [sh:class brick:Location] [sh:class rec:Space] );
        sh:message "A piece of Equipment can be located only at a Location/Space"
    ];
    sh:property [
        sh:path brick:feeds;
        sh:or (
            [ sh:class brick:Equipment ]
            [ sh:class brick:Location ]
            [ sh:class rec:Space ]
        );
        sh:message "A piece of Equipment can feed a Equipment or Location/Space."
    ];
    .

brick:Point a sh:NodeShape;
    sh:not [ sh:class brick:Equipment ; sh:message "Instances of Point cannot be Equipment." ],
           [ sh:class brick:Location ; sh:message "Instances of Point cannot be Locations." ],
           [ sh:class brick:Substance ; sh:message "Instances of Point cannot be Substances." ],
           [ sh:class brick:Quantity ; sh:message "Instances of Point cannot be Quantities." ],
           [ sh:class brick:Collection ; sh:message "Instances of Point cannot be Collections." ],
           [ sh:class brick:EntityProperty ; sh:message "Instances of Point cannot be EntityProperties." ] ;
    sh:property [
        sh:path brick:hasLocation ;
        sh:maxCount 0 ;
        sh:message "Points cannot have locations; use 'isPointOf' instead" ;
    ] ;
    .

brick:Collection a sh:NodeShape;
    sh:node [sh:not [ sh:class brick:Equipment ] ; sh:message "Collection is an exclusive top class." ],
            [sh:not [ sh:class brick:Location ] ; sh:message "Collection is an exclusive top class." ],
            [sh:not [ sh:class rec:Space ] ; sh:message "Collection is an exclusive top class." ],
            [sh:not [ sh:class brick:Substance ] ; sh:message "Collection is an exclusive top class." ],
            [sh:not [ sh:class brick:Quantity ] ; sh:message "Collection is an exclusive top class." ],
            [sh:not [ sh:class brick:Point ] ; sh:message "Collection is an exclusive top class." ] ;
    sh:property [
        sh:path brick:hasPart;
        sh:or (
            [ sh:class brick:Equipment ]
            [ sh:class brick:Location ]
            [ sh:class rec:Space ]
            [ sh:class brick:Point ]
            [ sh:class brick:Collection ]
        );
        sh:message "A Collection can be associated with Equipments, Locations/Spaces, Points, and other Collections."
    ];
    .

bsh:hasHotColdDeck
    a sh:NodeShape ;
    sh:targetClass brick:DDAHU ;
    sh:property [
        sh:path brick:hasPart ;
        sh:qualifiedValueShape [ sh:class brick:Hot_Deck ] ;
        sh:qualifiedValueShapesDisjoint true;
        sh:qualifiedMinCount 1 ;
        sh:qualifiedMaxCount 1 ;
        sh:message "DDAHU must have a brick:Hot_Deck" ;
    ] ;
    sh:property [
        sh:path brick:hasPart ;
        sh:qualifiedValueShape [ sh:class brick:Cold_Deck ] ;
        sh:qualifiedValueShapesDisjoint true;
        sh:qualifiedMinCount 1 ;
        sh:qualifiedMaxCount 1 ;
        sh:message "DDAHU must have a brick:Cold_Deck" ;
    ] ;
.

bsh:isPointOfShape a sh:PropertyShape ;
    sh:targetClass brick:Point ;
    sh:path brick:isPointOf ;
    sh:or ( [ sh:class brick:Equipment ] [ sh:class brick:Location ] [ sh:class rec:Space ] );
    sh:message "A Point can be a Point of Equipment, Location or Space."
.


# sensors inherit hasQuantity from their parent class
bsh:SensorInheritQuantityKind a sh:NodeShape ;
    sh:target [
        a sh:SPARQLTarget ;
        sh:select """
        PREFIX brick: <https://brickschema.org/schema/Brick#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            SELECT DISTINCT ?this WHERE {
              ?this rdfs:subClassOf+ brick:Sensor
            }
        """
    ] ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
        sh:construct """
        CONSTRUCT {
            $this brick:hasQuantity ?quantity .
        } WHERE {
            $this rdfs:subClassOf+ ?parent .
            ?parent brick:hasQuantity ?quantity .
            FILTER NOT EXISTS {
                $this brick:hasQuantity ?quantity .
            }
        }
        """ ;
    ] ;
.
