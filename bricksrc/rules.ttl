@prefix brick: <https://brickschema.org/schema/Brick#> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix ref: <https://brickschema.org/schema/Brick/ref#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix bsh: <https://brickschema.org/schema/BrickShape#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix s223: <http://data.ashrae.org/standard223#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .

# include this to inform reasoning
skos:broader rdf:type rdf:Property ;
  rdfs:label "has broader"@en ;
  owl:inverseOf skos:narrower ;
.

skos:narrower rdf:type rdf:Property ;
  rdfs:label "has narrower"@en ;
  owl:inverseOf skos:broader ;
.

bsh:EquivalentPropertyRule
  a sh:NodeShape ;
  sh:rule [
      a sh:SPARQLRule ;
      sh:construct """
CONSTRUCT {
    ?s ?t2 ?o .
} WHERE {
    ?s $this ?o .
    { $this owl:equivalentProperty ?t2 }
    UNION
    { ?t2 owl:equivalentProperty $this }
}""" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
  sh:targetSubjectsOf owl:equivalentProperty ;
.


bsh:SubPropertyOfRule
  a sh:NodeShape ;
  sh:rule [
      a sh:SPARQLRule ;
      sh:construct """
CONSTRUCT {
   ?s ?t2 ?o .
} WHERE {
    ?s $this ?o .
    { $this rdfs:subPropertyOf ?t2 }
}""" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
    sh:targetSubjectsOf rdfs:subPropertyOf ;
.


bsh:InferInverseProperties
  a sh:NodeShape ;
  sh:rule [
      a sh:SPARQLRule ;
      sh:construct """
            CONSTRUCT {
$this ?invP ?o .
}
WHERE {
?o ?p $this .
?invP owl:inverseOf ?p .
}
			""" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
  sh:targetClass brick:Entity ;
.

bsh:InferInverseProperties2
  a sh:NodeShape ;
  sh:rule [
      a sh:SPARQLRule ;
      sh:construct """
            CONSTRUCT {
$this ?p ?o .
}
WHERE {
?o ?invP $this .
?invP owl:inverseOf ?p .
}
			""" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
  sh:targetClass brick:Entity ;
.

bsh:InferSymmetricProperties
  a sh:NodeShape ;
  sh:rule [
      a sh:SPARQLRule ;
      sh:construct """
CONSTRUCT {
?o ?prop $this .
$this ?prop ?o .
}
WHERE {
  { $this ?prop ?o } UNION { ?o ?prop $this } .
  ?prop a owl:SymmetricProperty .
}
			""" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
  sh:targetClass brick:Entity ;
.

bsh:TagInferenceRule
    a  sh:NodeShape ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:construct """
CONSTRUCT {
$this brick:hasTag ?tag .
} WHERE {
    $this rdf:type/rdfs:subClassOf* ?class .
    ?class brick:hasAssociatedTag ?tag .
}""" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
    sh:targetClass brick:Entity ;
.

bsh:RDFSRangeRule
    a   sh:NodeShape ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:construct """
CONSTRUCT {
    ?val a ?shape .
} WHERE {
    $this rdfs:range ?shape .
    ?shape a sh:NodeShape .
    ?ent $this ?val .
    FILTER NOT EXISTS { ?val a ?shape }
}""" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
    sh:targetSubjectsOf rdfs:range ;
.

bsh:RDFSSubPropertyOfRuleForEntityProperties
    a   sh:NodeShape ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:construct """
            CONSTRUCT {
                ?s ?super ?skolemized .
                ?skolemized ?ep ?eo .
            } WHERE {
                $this rdfs:subPropertyOf+ ?super .
                ?super a brick:EntityProperty .
                $this a brick:EntityProperty .
                ?s $this ?o .
                BIND(IF(isBlank(?o), IRI(CONCAT("urn:skolem:", STRUUID())), ?o) AS ?skolemized)
                ?o ?ep ?eo .
            }
        """ ;
        sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
    sh:targetSubjectsOf rdfs:subPropertyOf ;
.

bsh:DeprecationRule
    a   sh:NodeShape ;
    sh:property [
        sh:path (rdf:type brick:deprecation) ;
        sh:maxCount 0 ;
        sh:severity sh:Warning ;
        sh:message "This concept is deprecated" ;
    ] ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:construct """
        CONSTRUCT { $this owl:deprecated true }
        WHERE { $this brick:deprecation ?dep }
        """ ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
    sh:property [
        sh:path brick:deprecatedInVersion ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path brick:deprecationMitigationMessage ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path brick:deprecationMitigationRule ;
        sh:class sh:NodeShape ;
        sh:maxCount 1 ;
    ] ;
    sh:targetSubjectsOf brick:deprecation ;
.

bsh:DeprecationInferenceForInstancesRule
    a  sh:NodeShape ;
sh:rule [ a sh:SPARQLRule ;
sh:message "Deprecated class is temporarily augmented by the new class" ;
sh:construct """CONSTRUCT {
$this a ?newClass .
}
WHERE {
$this a ?class .
?class owl:deprecated true .
?class brick:isReplacedBy ?newClass .
FILTER NOT EXISTS {$this a ?newClass}
}""" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
    sh:targetClass brick:Entity ;
.

bsh:DeprecationRuleForInstances a sh:NodeShape ;
sh:severity sh:Warning ;
sh:sparql [ a sh:SPARQLConstraint ;
sh:message "{$this} has type {?class} which was deprecated in version {?depver}. For now, it has been updated to also be of type {?newClass}." ;
sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
sh:select """SELECT $this ?class ?newClass ?depver WHERE {
$this a ?class .
?class owl:deprecated true .
?class brick:deprecatedInVersion ?depver .
?class brick:isReplacedBy ?newClass .
}""" ] ;
sh:targetClass brick:Entity .


# bsh:TagInferenceRule
#     a sh:NodeShape ;
#     sh:rule [
#         a sh:SPARQLRule ;
#         sh:construct """
# CONSTRUCT {
#     ?ent a ?class .
# } WHERE {
#     {
#         SELECT (count(?enttag) as ?entcount)
#         WHERE {
#             ?ent brick:hasTag ?enttag ;
#             ?class brick:hasAssociatedTag ?enttag ;
#         }
#     }
#     {
#         SELECT (count(?tag) AS ?tagcount)
#         WHERE {
#             ?class brick:hasAssociatedTag ?tag
#         }
#     }
# }""" ;
#     sh:prefixes brick: ;
#     sh:prefixes sh: ;
#     ] ;
#     sh:targetSubjectsOf brick:hasTag ;
# .

bsh:OWLEquivalentClassRule1
    a   sh:NodeShape ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:construct """
CONSTRUCT {
    ?s a ?t2 .
} WHERE {
    ?s a $this .
    { ?t2 owl:equivalentClass $this }
    UNION
    { $this owl:equivalentClass ?t2 }
}""" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
    sh:targetSubjectsOf owl:equivalentClass ;
.

bsh:OWLEquivalentClassRule2
    a   sh:NodeShape ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:construct """
CONSTRUCT {
    ?s a ?t2 .
} WHERE {
    ?s a $this .
    { ?t2 owl:equivalentClass $this }
    UNION
    { $this owl:equivalentClass ?t2 }
}""" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
    sh:targetObjectsOf owl:equivalentClass ;
.

bsh:MeterRelationshipRule a sh:NodeShape ;
    sh:targetClass brick:Meter ;
    sh:property [
        sh:path brick:meters ;
        sh:qualifiedValueShape [ sh:class brick:Meter ] ;
        sh:qualifiedMaxCount 0 ;
        sh:message "Relationship between meters is hasSubMeter/isSubMeterOf, not meters/isMeteredBy" ;
    ] ;
    sh:property [
        sh:path brick:isMeteredBy ;
        sh:qualifiedValueShape [ sh:class  brick:Meter ] ;
        sh:qualifiedMaxCount 0 ;
        sh:message "Relationship between meters is hasSubMeter/isSubMeterOf, not meters/isMeteredBy" ;
    ] ;
.

bsh:BuildingMeterRule a sh:NodeShape ;
    sh:targetClass brick:Meter ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:construct """
        CONSTRUCT {
            $this rdf:type ?newtype .
        }
        WHERE {
            $this brick:meters ?bldg .
            ?bldg rdf:type/rdfs:subClassOf* brick:Building .
            $this rdf:type ?type .
            BIND(IRI(CONCAT("https://brickschema.org/schema/Brick#Building_", strafter(str(?type), "https://brickschema.org/schema/Brick#"))) as ?newtype) .
            FILTER (strEnds(str(?type), "_Meter"))
            FILTER (!strStarts(str(?type), "https://brickschema.org/schema/Brick#Building_"))
        }
        """ ;
        sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
.

bsh:VirtualMeterRule a sh:NodeShape ;
    sh:targetClass brick:Entity ;
    sh:sparql [
        a sh:SPARQLConstraint ;
        sh:message "Only meters can have the isVirtualMeter property be true" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
        sh:select """
            SELECT $this WHERE {
                $this brick:isVirtualMeter/brick:value true .
                FILTER NOT EXISTS { $this rdf:type/rdfs:subClassOf* brick:Meter } .
            }
        """ ;
    ] .

# infer the hasSubstance relationship for meter instances
bsh:MeterInferSubstance a sh:NodeShape ;
    sh:targetClass brick:Meter ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
        sh:construct """
        CONSTRUCT {
            $this brick:hasSubstance ?substance .
        } WHERE {
            $this rdf:type ?meter .
            ?meter rdfs:subClassOf* brick:Meter .
            ?meter brick:hasSubstance ?substance .
        }
        """ ;
    ] ;
.

# infer the meter subclass from the hasSubstance relationship
# don't do this for building meters -- handled below
bsh:MeterInferSubclassNonBuildingMeter a sh:NodeShape ;
    sh:targetClass brick:Meter ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
        sh:construct """
        CONSTRUCT {
            $this rdf:type ?metertype .
        } WHERE {
            $this rdf:type/rdfs:subClassOf* brick:Meter .
            $this brick:hasSubstance ?substance .
            ?metertype brick:hasSubstance ?substance .
            FILTER NOT EXISTS {
                $this rdf:type/rdf:subClassOf* brick:Building_Meter
            }
            MINUS {
                ?metertype rdfs:subClassOf* brick:Building_Meter .
            }
        }
        """ ;
    ] ;
.

# infer the *building* meter subclass from the hasSubstance relationship
bsh:MeterInferSubclassBuildingMeter a sh:NodeShape ;
    sh:targetClass brick:Building_Meter ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
        sh:construct """
        CONSTRUCT {
            $this rdf:type ?metertype .
        } WHERE {
            $this rdf:type/rdfs:subClassOf* brick:Building_Meter .
            $this brick:hasSubstance ?substance .
            ?metertype brick:hasSubstance ?substance .
            ?metertype rdfs:subClassOf+ brick:Building_Meter .
        }
        """ ;
    ] ;
.

bsh:OneLastKnownValuePerEntity a sh:NodeShape ;
    sh:targetSubjectsOf brick:lastKnownValue ;
    sh:property [
        sh:path brick:lastKnownValue ;
        sh:message "Only one last known value per entity is allowed" ;
        sh:maxCount 1 ;
    ] ;
.

bsh:TimeseriesReferenceOnPointsConstraint a sh:NodeShape ;
    sh:targetSubjectsOf ref:hasExternalReference ;
    sh:sparql [
        a sh:SPARQLConstraint ;
        sh:message "Only Brick Points can have external timeseries references" ;
      sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
        sh:select """
            SELECT $this
            WHERE {
                $this ref:hasExternalReference ?ref .
                ?ref rdf:type ref:TimeseriesReference .
                FILTER NOT EXISTS { $this rdf:type/rdfs:subClassOf* brick:Point }
            }
        """ ;
    ] ;
.

bsh:PointsHaveQuantityKinds a sh:NodeShape ;
    # add more as needed
    sh:target [
        a sh:SPARQLTarget ;
        sh:select """
          SELECT ?this
          WHERE {
            ?this rdfs:subClassOf+ brick:Sensor .
            FILTER NOT EXISTS { ?class owl:deprecated true }
          }
        """ ;
        sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
      ] ;
    sh:target [
        a sh:SPARQLTarget ;
        sh:select """
          SELECT ?this
          WHERE {
            ?this rdfs:subClassOf+ brick:Setpoint .
            FILTER NOT EXISTS { ?class owl:deprecated true }
          }
        """ ;
        sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
      ] ;
    sh:property [
        sh:class qudt:QuantityKind ;
        sh:path brick:hasQuantity ;
        sh:minCount 1 ;
        sh:message "Brick Points should have associated quantity kinds" ;
    ] ;

.

bsh:hasQuantity a sh:NodeShape ;
    sh:targetObjectsOf brick:hasQuantity ;
    sh:class qudt:QuantityKind ;
.

bsh:hasSubstance a sh:NodeShape ;
    sh:targetObjectsOf brick:hasSubstance ;
    sh:class brick:Substance ;
.


# rule to add rec:includes when a brick:Collection contains a brick:Equipment
bsh:CollectionIncludesEquipment a sh:NodeShape ;
    sh:targetClass brick:Collection, brick:System, brick:Equipment ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:construct """
        CONSTRUCT {
            $this rec:includes ?eq .
        }
        WHERE {
            $this brick:hasPart ?eq .
            {
                ?eq rdf:type/rdfs:subClassOf* brick:Equipment .
            }
            UNION
            {
                ?eq rdf:type/rdfs:subClassOf* brick:Collection .
            }
            UNION
            {
                ?eq rdf:type/rdfs:subClassOf* brick:System .
            }
        }
        """ ;
        sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
    ] ;
.

# add unidirectional charging to all EVsE chargers as a default value
# UNLESS there is already a brick:electricVehicleChargerDirectionality attribute
# on ports associated with the charger
bsh:AddDefaultEVSEChargerDirection a sh:NodeShape ;
    sh:targetClass brick:Electric_Vehicle_Charging_Station ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
        sh:construct """
        CONSTRUCT {
            $this brick:electricVehicleChargerDirectionality [ brick:value "unidirectional"^^xsd:string ]
        } WHERE {
            $this rdf:type brick:Electric_Vehicle_Charging_Station .
            FILTER NOT EXISTS {
                $this brick:electricVehicleChargerDirectionality ?direction .
            }
            FILTER NOT EXISTS {
                $this brick:hasPart ?port .
                ?port a brick:Electric_Vehicle_Charging_Port .
                ?port brick:electricVehicleChargerDirectionality ?other_direction .
            }
        }
        """ ;
    ] ;
.

# inherit the directionality of the EVSE charger to the ports
bsh:InheritEVSEChargerDirection a sh:NodeShape ;
    sh:targetClass brick:Electric_Vehicle_Charging_Port ;
    sh:rule [
        a sh:SPARQLRule ;
        sh:prefixes <https://brickschema.org/schema/1.4/Brick> ;
        sh:construct """
        CONSTRUCT {
            $this brick:electricVehicleChargerDirectionality ?direction
        } WHERE {
            $this rdf:type brick:Electric_Vehicle_Charging_Port .
            $this brick:isPartOf ?charger .
            ?charger a brick:Electric_Vehicle_Charging_Station .
            ?charger brick:electricVehicleChargerDirectionality ?direction .
            FILTER NOT EXISTS {
                $this brick:electricVehicleChargerDirectionality ?other_direction .
            }
        }
        """ ;
    ] ;
.
